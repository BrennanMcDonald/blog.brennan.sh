<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on 0x7CC</title><link>https://blog.brennan.sh/posts/</link><description>Recent content in Posts on 0x7CC</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 14 Jul 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.brennan.sh/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Your blog post can be short.</title><link>https://blog.brennan.sh/posts/short-blog-posts/</link><pubDate>Tue, 14 Jul 2020 00:00:00 +0000</pubDate><guid>https://blog.brennan.sh/posts/short-blog-posts/</guid><description>&lt;h2 id="your-blog-post-can-be-short">Your blog post can be short.&lt;/h2>
&lt;p>I&amp;rsquo;ve been meaning to write several blog posts for a while, but despite having inspiration I&amp;rsquo;ve failed to produce any content in 5 months. I&amp;rsquo;ve been trying to write about a few topics I&amp;rsquo;ve been passionate about since the pandemic started with no avail. My posts always felt too short to qualify as a “blog post”, always feeling like I didn&amp;rsquo;t have enough content to deliver or my research wasn&amp;rsquo;t thorough enough.&lt;/p>
&lt;p>Then I found a post submitted to HackerNews. The post was maybe 500 words, two paragraphs, but the author conveyed their message efficiently. While I disagreed with the topic, I was still able to understand the author&amp;rsquo;s message in these two paragraphs. The length of a post shouldn&amp;rsquo;t determine it&amp;rsquo;s quality, instead, the contents of the post should speak for themselves.&lt;/p>
&lt;p>From now on, on this blog, I won&amp;rsquo;t concern myself with the length of a post. Instead, I will worry about conveying my message with efficiency; And actually writing the posts I want to write.&lt;/p></description></item><item><title>PtPMRR: Price to Performance Modified Round Robin.</title><link>https://blog.brennan.sh/posts/ptpmrr-whitepage/</link><pubDate>Wed, 19 Feb 2020 00:00:00 +0000</pubDate><guid>https://blog.brennan.sh/posts/ptpmrr-whitepage/</guid><description>&lt;h2 id="multi-cloud-distributed-task-scheduling-for-cost-and-qos-optimization">Multi-cloud distributed task scheduling for cost and QoS optimization&lt;/h2>
&lt;p>Cloud computing offers the ability to provision resources as required on a per-task basis. Due to the growth of Cloud computing, there are many challenges faced today. One of these challenges is scheduling tasks to minimize cost in respect to runtime. Task scheduling is considered an NP hard problem with O(m*n) complexity when running n tasks on m resources.&lt;/p>
&lt;p>In a multi-cloud scenario we still want to select the best resource to run a task on. However due to cost models that scale independently and the fact that measured performance that can vary from reported performance, this problem isn&amp;rsquo;t as simple as it sounds. Optimally we want our algorithm to select the resource that would run at the highest performance to cost ratio.&lt;/p>
&lt;h2 id="proposed-algorithm">Proposed Algorithm&lt;/h2>
&lt;p>The algorithm I am proposing is a modified scheduling algorithm that has been adapted to factor in the cost of a VM and it’s actual performance instead of the performance as reported by the cloud provider. The first step is to initialize a queue of all the tasks we want to run. We then start by building a cost to performance ratio for each machine that we want to run the current task on. After some variable initialization, we identify the highest performance to cost ratio. This will not specifically select the fastest or the cheapest machine, but the machine that will run the fastest for the lowest cost. We then identify the cloud provider that our selected VM is running on and attempt to schedule our task to that Virtual Machine. In the case that the scheduling fails, we attempt to reschedule.&lt;/p>
&lt;pre>&lt;code>let Q = A queue of all tasks to run
let n = the # of VMs across all clouds
let ETC(i,j) = The expected runtime of Task i on VM j
let CPMS(j) = The cost per ms of runtime on VM j
let M = Total # of clouds
While Q != null
i &amp;lt;- dequeue(Q)
for j = 1,2,3, ... , n
RtC(i,j) = ETC(i,j)/CPMS(j)
endfor
maximum = RtC(i,1)
index = 1
for j = 2,3,4, ... , n
if maximum &amp;lt; RtC(i,j)
maximum = RtC(i,j)
index = j
endif
endfor
for k = 1,2,3, ... , M
if index virtual machine is delpoyed under a cloud k
SCHEDULE(i,k,index)
while the task is not schedulable
RESCHEDULE(i,k,index)
endwhile
endif
endfor
endwhile
&lt;/code>&lt;/pre>&lt;h3 id="etc-formula">ETC Formula&lt;/h3>
&lt;p>&lt;img src="https://blog.brennan.sh/img/ptpmrr/etc_formula.png" alt="alt text" title="Logo Title Text 2">&lt;/p>
&lt;h2 id="implemenetation">Implemenetation&lt;/h2>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#66d9ef">while&lt;/span>&lt;span style="color:#f92672">(!&lt;/span>taskQueue&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">isEmpty&lt;/span>&lt;span style="color:#f92672">())&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
List&lt;span style="color:#f92672">&amp;lt;&lt;/span>CloudProviderVM&lt;span style="color:#f92672">&amp;gt;&lt;/span> VMList &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> ArrayList&lt;span style="color:#f92672">&amp;lt;&amp;gt;(&lt;/span>VMs&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#66d9ef">int&lt;/span> n &lt;span style="color:#f92672">=&lt;/span> VMList&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">size&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;span style="color:#66d9ef">int&lt;/span> M &lt;span style="color:#f92672">=&lt;/span> CloudProviders&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">size&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
Task t &lt;span style="color:#f92672">=&lt;/span> taskQueue&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">remove&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;span style="color:#66d9ef">double&lt;/span> maximum &lt;span style="color:#f92672">=&lt;/span> calculateRtC&lt;span style="color:#f92672">(&lt;/span>t&lt;span style="color:#f92672">,&lt;/span> VMs&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">get&lt;/span>&lt;span style="color:#f92672">(&lt;/span>0&lt;span style="color:#f92672">));&lt;/span>
&lt;span style="color:#66d9ef">int&lt;/span> index &lt;span style="color:#f92672">=&lt;/span> 0&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#66d9ef">for&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span> j &lt;span style="color:#f92672">=&lt;/span> 1&lt;span style="color:#f92672">;&lt;/span> j &lt;span style="color:#f92672">&amp;lt;=&lt;/span> n&lt;span style="color:#f92672">;&lt;/span> j&lt;span style="color:#f92672">++)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">double&lt;/span> current &lt;span style="color:#f92672">=&lt;/span> calculateRtC&lt;span style="color:#f92672">(&lt;/span>t&lt;span style="color:#f92672">,&lt;/span> VMs&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">get&lt;/span>&lt;span style="color:#f92672">(&lt;/span>j&lt;span style="color:#f92672">));&lt;/span>
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>maximum &lt;span style="color:#f92672">&amp;lt;&lt;/span> current&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
maximum &lt;span style="color:#f92672">=&lt;/span> current&lt;span style="color:#f92672">;&lt;/span>
index &lt;span style="color:#f92672">=&lt;/span> j&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#66d9ef">boolean&lt;/span> success &lt;span style="color:#f92672">=&lt;/span> schedule&lt;span style="color:#f92672">(&lt;/span>VMList&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">get&lt;/span>&lt;span style="color:#f92672">(&lt;/span>index&lt;span style="color:#f92672">),&lt;/span> t&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#66d9ef">while&lt;/span>&lt;span style="color:#f92672">(!&lt;/span>success&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
VMList&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">remove&lt;/span>&lt;span style="color:#f92672">(&lt;/span>VMList&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">get&lt;/span>&lt;span style="color:#f92672">(&lt;/span>index&lt;span style="color:#f92672">));&lt;/span>
index &lt;span style="color:#f92672">=&lt;/span> 0&lt;span style="color:#f92672">;&lt;/span>
maximum &lt;span style="color:#f92672">=&lt;/span> calculateRtC&lt;span style="color:#f92672">(&lt;/span>t&lt;span style="color:#f92672">,&lt;/span> VMs&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">get&lt;/span>&lt;span style="color:#f92672">(&lt;/span>0&lt;span style="color:#f92672">));&lt;/span>
&lt;span style="color:#66d9ef">for&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span> j &lt;span style="color:#f92672">=&lt;/span> 1&lt;span style="color:#f92672">;&lt;/span> j &lt;span style="color:#f92672">&amp;lt;=&lt;/span> n&lt;span style="color:#f92672">;&lt;/span> j&lt;span style="color:#f92672">++)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">double&lt;/span> current &lt;span style="color:#f92672">=&lt;/span> calculateRtC&lt;span style="color:#f92672">(&lt;/span>t&lt;span style="color:#f92672">,&lt;/span> VMList&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">get&lt;/span>&lt;span style="color:#f92672">(&lt;/span>j&lt;span style="color:#f92672">));&lt;/span>
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>maximum &lt;span style="color:#f92672">&amp;lt;&lt;/span> current&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
maximum &lt;span style="color:#f92672">=&lt;/span> current&lt;span style="color:#f92672">;&lt;/span>
index &lt;span style="color:#f92672">=&lt;/span> j&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
success &lt;span style="color:#f92672">=&lt;/span> schedule&lt;span style="color:#f92672">(&lt;/span>VMList&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">get&lt;/span>&lt;span style="color:#f92672">(&lt;/span>index&lt;span style="color:#f92672">),&lt;/span> t&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="experimental-parameters">Experimental Parameters&lt;/h2>
&lt;p>A large selection of algorithms to schedule tasks currently exist. I will be comparing my proposed algorithm to these algorithms to test its performance.&lt;/p>
&lt;p>I will experiment with this algorithm first on CloudSim to get a working model and then scale it to run on the three main cloud providers, amazon, google, and microsoft.&lt;/p>
&lt;p>CloudSim set up to simulate cloud federation using three instances with 200 cloudlets each.
Practical testing will use machines on their respective clouds.&lt;/p>
&lt;p>Cloud 1 : (2X) Google Cloud n1-standard-1 (1 vCPU, 3.75GB RAM)&lt;br>
Cloud 2 : (2X) AWS a1.medium (1 vCPU, 2GB RAM)&lt;br>
Cloud 3 : (2X) Azure DS1 v2 (2 vCPU, 3.5GB RAM)&lt;/p>
&lt;h2 id="results">Results&lt;/h2>
&lt;p>By using this algorithm, costs were reduced by up to 20%&lt;/p>
&lt;p>&lt;img src="https://blog.brennan.sh/img/ptpmrr/Figure_4.png" alt="alt text" title="Cost">&lt;/p>
&lt;p>Cpu Usage remained mostly the same&lt;/p>
&lt;p>&lt;img src="https://blog.brennan.sh/img/ptpmrr/Figure_5.png" alt="alt text" title="CPU usage">&lt;/p>
&lt;p>Makespan scaled with the traditional round robin and smallest job first, however due to the naive nature of first come first serve it scaled much better than the other algorithms compared to.&lt;/p>
&lt;p>&lt;img src="https://blog.brennan.sh/img/ptpmrr/Figure_6.png" alt="alt text" title="Makespan">&lt;/p></description></item><item><title>New Years 2019 in Japan: Part Two.</title><link>https://blog.brennan.sh/posts/japan-part-two/</link><pubDate>Sun, 16 Feb 2020 00:00:02 +0000</pubDate><guid>https://blog.brennan.sh/posts/japan-part-two/</guid><description>&lt;h2 id="tokyo-odaiba-and-onsens">Tokyo: Odaiba and Onsens&lt;/h2>
&lt;p>Over the next few days I went to different shops, landmarks, and things that I saw online. Starting off the series of days with a visit to Tsukiji Fish Market and ate some of the the ever amazing Tuna Fish that it is famous for. From there I went off to start my adventures around Odaiba, an up-and-coming industrial/commercial section with massive buildings and a tonne of cool places to visit. Some of the cool places to visit are the Science Center, Team Labs Borderless, and the various statues and monuments.&lt;/p>
&lt;p>&lt;img src="https://blog.brennan.sh/img/japan/hakone.jpg" alt="Hakone!">&lt;/p>
&lt;p>The day after Odabia, I spent a day trip to visit the Tenzen Onsen in Hakone, Japan. Of all the destinations I visited during this trip, this day was easily the most interesting and the most authentic insight into the lives of native Japanese. For those who don&amp;rsquo;t know, an Onsen is a communal Japanese bath house traditionally that was filled hot water funnelled from volcanic hot springs, high in mineral content, for people to bathe in. Along with the beauty of the Onsen, the surronding town of Hakone was very nice. I&amp;rsquo;m not sure but if I had to guess, this is a very &amp;ldquo;Resort&amp;rdquo; area as the shops and resturants felt like they were built for that cause.&lt;/p>
&lt;h2 id="tokyo-final-days">Tokyo: Final days&lt;/h2>
&lt;p>The last few days I spent visiting other smaller destinations I wanted to hit as well as re-visiting the ones that I liked the best. Including Roppingi Hills, Shinbashi, and Ginza. Three of the wealthier destinations in Tokyo. While in Roppongi, I had one thing I truly wanted to visit and that was the maman statue by Louise Bourgeois. This statue is signifigant to me because I live in Ottawa, where one of the 7 perminant statues exists, and I got to travel to the other side of the world to visit another of the 7. I also spent many more hours and thousands more yen playing Ongeki.&lt;/p>
&lt;h2 id="kyoto-lots-of-walking">Kyoto: Lots of walking&lt;/h2>
&lt;p>Taking the bullet train to Kyoto was an incredible experience, going 300mph on land is terrifying but oddly serene and calming. I also managed to snag a seat with a view of Mt. Fuji. Unfortunately it was a bit cloudy and this was the best view I could get.&lt;/p>
&lt;p>&lt;img src="https://blog.brennan.sh/img/japan/fuji.png" alt="Hakone!">&lt;/p>
&lt;p>Due to my over-stay in Tokyo, I only got a few days to spend in Kyoto but I tried my best to make the time I had. Most of the time on the first day was spend walking between the major sights and sounds of Kyoto. From the Golden Palace, to the Fushimi Inari shrine, and the Gion. There isnt much else to be said about my time in Kyoto, except to visit a bar called Beer Bar Jive. 10/10&lt;/p>
&lt;h2 id="food">Food&lt;/h2>
&lt;p>That wraps up my experiences in Japan, however here is a small gallery of all the food I got to enjoy.&lt;/p>
&lt;p>&lt;img src="https://blog.brennan.sh/img/japan/food/curry.png" alt="Hakone!">
&lt;img src="https://blog.brennan.sh/img/japan/food/beef.png" alt="Hakone!">
&lt;img src="https://blog.brennan.sh/img/japan/food/pancakes.png" alt="Hakone!">
&lt;img src="https://blog.brennan.sh/img/japan/food/pastry.png" alt="Hakone!">
&lt;img src="https://blog.brennan.sh/img/japan/food/bun.png" alt="Hakone!">
&lt;img src="https://blog.brennan.sh/img/japan/food/takiyaki.png" alt="Hakone!">&lt;/p></description></item><item><title>New Years 2019 in Japan: Part One.</title><link>https://blog.brennan.sh/posts/japan-part-one/</link><pubDate>Sun, 16 Feb 2020 00:00:01 +0000</pubDate><guid>https://blog.brennan.sh/posts/japan-part-one/</guid><description>&lt;h2 id="the-flight">The Flight&lt;/h2>
&lt;p>My flight to Tokyo started in Nanaimo Airport (&lt;a href="https://www.flightradar24.com/data/airports/ycd">YCD&lt;/a>) for a quick hop to Vancouver Internation Airport (&lt;a href="https://www.flightradar24.com/data/airports/yvr">YVR&lt;/a>). I was lucky to find a deal from Vancouver to Tokyo on ANA which is one of the best airlines in the world, and it shows.&lt;/p>
&lt;p>&lt;img src="https://blog.brennan.sh/img/japan/food.jpg" alt="Eggs + Ground (pulled) salmon + shitakee mushroom cap, seaweed + Roe, Colslaw + Chicken">&lt;/p>
&lt;h6 id="eggs--ground-pulled-salmon--shitakee-mushroom-cap-seaweed--roe-colslaw--chicken">Eggs + Ground (pulled) salmon + shitakee mushroom cap, seaweed + Roe, Colslaw + Chicken&lt;/h6>
&lt;p>The service, food, and amenities provided by the airline were all at the top of their game. Even given the fact that the food was my first real taste of &amp;ldquo;authentic&amp;rdquo; Japanese food and it wasn&amp;rsquo;t my best meal ever. One mistake I did make, was taking a drink from the flight attendants which was some thick, corn based drink, possible Corn Potage. All I can assume is it&amp;rsquo;s an acquired taste.&lt;/p>
&lt;p>&lt;img src="https://blog.brennan.sh/img/japan/tokyo-from-a-plane.jpg" alt="Tokyo from a plane">&lt;/p>
&lt;p>I managed to capture a cool picture of Tokyo from above, capturing the intense scale of the city.&lt;/p>
&lt;h2 id="tokyo-first-days">Tokyo: First Days&lt;/h2>
&lt;h3 id="day-0">Day 0&lt;/h3>
&lt;p>Just after touching down, I took the JR Keikyū Airport Line and the Yamanote Line from the airport to Tokyo Station. I was already impressed with the quantity and quality of the intra-city transit by how easy it was to get on and off these trains.&lt;/p>
&lt;p>&lt;img src="https://blog.brennan.sh/img/japan/tokyo-station.jpg" alt="Tokyo Station">&lt;/p>
&lt;h6 id="tokyo-station">Tokyo Station&lt;/h6>
&lt;p>I decided to walk from the station to my hotel because after being placed in the center of Tokyo, I wanted to see as much as I could. This ended up being a great decision, not only did my route take my past the &lt;a href="https://en.wikipedia.org/wiki/Tokyo_Imperial_Palace">Tokyo Imperial Palace&lt;/a>, I got to see it illuminated.&lt;/p>
&lt;p>&lt;img src="https://blog.brennan.sh/img/japan/palace-1.jpg" alt="Tokyo Imperial Palace, Illuminated at night">&lt;/p>
&lt;h6 id="tokyo-imperial-palace-illuminated-at-night">Tokyo Imperial Palace, Illuminated at night&lt;/h6>
&lt;p>After getting to the hotel I walked Shinjuku 3 Chome around a bit but was quite exhausted so after about 45 minutes, I retired to my capsule hotel.&lt;/p>
&lt;p>&lt;img src="https://blog.brennan.sh/img/japan/nine-hours.jpg" alt="My capsule hotel, 9Hours">&lt;/p>
&lt;h6 id="my-capsule-hotel-9hours">My capsule hotel, 9Hours&lt;/h6>
&lt;p>Day one involved a lot of walking, and because i&amp;rsquo;m some weird data horder, a year and a bit later I say I took 14,613 steps. I can also show you exactly on a map where I went. Obviously the data isnt perfect and there are some weird artifacts, but for the most part this is where I went.&lt;/p>
&lt;p>&lt;img src="https://blog.brennan.sh/img/japan/too-much.png" alt="My timeline for December 29th, 2018">&lt;/p>
&lt;h6 id="my-timeline-for-december-29th-2018">My timeline for December 29th, 2018&lt;/h6>
&lt;p>The day started off with me going from the hotel to Hanzomon Station, one again walking instead of taking transit as I personally find walking as the best way to experience a place. I could have taken the rail from my hotel to Shibuya but walking half allowed me to catch my first real sights of the city and some of the really cool architecture.&lt;/p>
&lt;p>&lt;img src="https://blog.brennan.sh/img/japan/merge-one.png" alt="Aquifer and Really cool building!">&lt;/p>
&lt;h6 id="aquifer-and-really-cool-building">Aquifer and Really cool building!&lt;/h6>
&lt;p>Day one was filled with exploring and getting comfortable with the sights and sounds of Tokyo. Wandering from the &lt;a href="https://www.gotokyo.org/en/spot/78/index.html">scramble crossing&lt;/a>, to &lt;a href="https://en.wikipedia.org/wiki/Takeshita_Street">たけしたどり(Takeshita Dore)&lt;/a>, and finally visiting &lt;a href="https://en.wikipedia.org/wiki/Yoyogi_Park">代々木公園 (Yoyogi Park)&lt;/a>.&lt;/p>
&lt;p>&lt;img src="https://blog.brennan.sh/img/japan/yoyogi.jpg" alt="Yoyogi park temple!">&lt;/p>
&lt;h6 id="yoyogi-park-temple">Yoyogi park temple!&lt;/h6>
&lt;p>The hightlight of my day was definity walking around these amazing shrines and torii gates. Once I was done around the harajuku area I ventured up to Shinjuku, definitely my favorite of the three areas of the city from the whole trip. I found that Shibuya was way too touristy and didn&amp;rsquo;t feel very authentic, while Shinjuku was more authentic. I also took my first a chance to visit a &lt;a href="https://en.wikipedia.org/wiki/Don_Quijote_(store)">Don Quijote&lt;/a> while in Shinjuku which only made me wish they existed in North America.&lt;/p>
&lt;p>&lt;img src="https://blog.brennan.sh/img/japan/downtown-two.gif" alt="GIF of downtown.">&lt;/p>
&lt;p>Day two was spent doing a lot of similar things to the first day, visiting Shibuya, Shinjuku, and Harajuku. With the main difference is on day 2, I got the chance to visit Akihabara. Now i&amp;rsquo;m not too into anime, but it&amp;rsquo;s awesome seeing all of the huge figure shops, the billboards, and 5 story tall arcades. This is where I spent a lot of my time while in Aki, and I mean a LOT. In particular I fell in love with a game called Ongeki, a rythem game with 3 distinct sets of controls.&lt;/p>
&lt;p>&lt;img src="https://blog.brennan.sh/img/japan/aki.png" alt="Akihabara">&lt;/p>
&lt;h6 id="akihabara">Akihabara&lt;/h6>
&lt;p>I actually managed to spend almost a whole day, wandering through old technology shops and arcades. Selling hundreds of classic Nintendo consoles, games, and accessories.&lt;/p>
&lt;p>&lt;img src="https://blog.brennan.sh/img/japan/consoles.jpg" alt="Old consoles for sale.">&lt;/p>
&lt;h6 id="mama-maglione">Mama Maglione&lt;/h6>
&lt;h2 id="tokyo-new-years-and-hatsumōde">Tokyo: New years and Hatsumōde&lt;/h2>
&lt;p>My next few days were quiet during the day and busy at night, I spend my days walking around, exploring &amp;lsquo;hole-in-the-wall&amp;rsquo; type places and eating good food. I spend new years with a group of people that I met on Line. A group of us stayed around downtown Shibuya while the rest went to club around the Odaiba area. All and all a very fun night spend with some great people.&lt;/p>
&lt;p>&lt;img src="https://blog.brennan.sh/img/japan/new-years.jpg" alt="Friends!">&lt;/p>
&lt;h6 id="the-best-people">The best people.&lt;/h6>
&lt;p>Hatsumode is the New Years celeberation in Japan that is celebrated amongst families. It is defined as the first shrine visit of the year and is incredibly popular amongst Japanese. I was looking for a place to go, I debated visiting Meji Jingu shrine however I ended up taking a train, getting off at a random stop, and vising a shrine there.&lt;/p>
&lt;p>&lt;a href="https://blog.brennan.sh/posts/japan-part-two/">Continue Reading&amp;hellip;&lt;/a>&lt;/p></description></item><item><title>Using Github Actions to Automate Build and Deploy.</title><link>https://blog.brennan.sh/posts/gh-actions-automate-build-deploy/</link><pubDate>Sat, 15 Feb 2020 00:00:00 +0000</pubDate><guid>https://blog.brennan.sh/posts/gh-actions-automate-build-deploy/</guid><description>&lt;ul>
&lt;li>&lt;a href="#introduction">Introduction&lt;/a>&lt;/li>
&lt;li>&lt;a href="#elements-of-a-github-actions-workflow">Elements of a Github actions workflow&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#trigger">Trigger&lt;/a>&lt;/li>
&lt;li>&lt;a href="#runner">Runner&lt;/a>&lt;/li>
&lt;li>&lt;a href="#actions">Actions&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#checkout-action">Checkout Action&lt;/a>&lt;/li>
&lt;li>&lt;a href="#third-party-actions">Third Party Actions&lt;/a>&lt;/li>
&lt;li>&lt;a href="#custom-actions-run">Custom Actions (Run)&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>Github Actions are a relatively new feature that was put in place to help people run CI/CD workflows directly from Github Repos. In my opinion, if you host your code on Github, they are the cleanest and fastest free form of CI/CD out there today. To access the actions for a Github repo, navigate to the repo&amp;rsquo;s page and click on the &amp;ldquo;Actions&amp;rdquo; tab at the top.&lt;/p>
&lt;p>&lt;img src="https://blog.brennan.sh/img/gh-action-build-deploy/tabs.PNG" alt="tabs">&lt;/p>
&lt;p>Here you can check the status of existing workflows, and by clicking the new workflow button you can deploy an existing template or a blank workflow file.&lt;/p>
&lt;p>&lt;img src="https://blog.brennan.sh/img/gh-action-build-deploy/new_workflow.PNG" alt="Sections of a workflow">&lt;/p>
&lt;h2 id="elements-of-a-github-actions-workflow">Elements of a Github actions workflow&lt;/h2>
&lt;p>Github actions are &lt;code>yaml&lt;/code> files that live in the &lt;code>.github/workflows&lt;/code> folder. Here we have an overview of the actions involved in a workflow and the layout that they occur in.&lt;/p>
&lt;p>&lt;img src="https://blog.brennan.sh/img/gh-action-build-deploy/sections.png" alt="Sections of a workflow">&lt;/p>
&lt;p>The core of a Github action workflow is a &lt;code>yaml&lt;/code> file. There are hundreds of possible keys that exist to be used in this &lt;code>YAML&lt;/code> file. However, today were only going to focus on the few important ones that are required for a basicly setup. We can start with the name for our workflow, it can be anything so don&amp;rsquo;t worry about what you put here.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Build and Deploy&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="trigger">Trigger&lt;/h3>
&lt;p>The trigger is the action that tells your workflow to run. This can be anything from pushing to a branch, cron events, or even webhook events. More on actions can be found &lt;a href="https://help.github.com/en/actions/reference/events-that-trigger-workflows">here&lt;/a>. For the sake of this guide, we will be using a &lt;em>&lt;strong>push to branch&lt;/strong>&lt;/em> action, in specific we will be triggering our event on a push to the master branch. This is done by using the following 4 lines of code.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#f92672">on&lt;/span>:
&lt;span style="color:#f92672">push&lt;/span>:
&lt;span style="color:#f92672">branches&lt;/span>:
- &lt;span style="color:#ae81ff">master&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This reads fairly cleanly so I wont explain it too much, but the root key is the &lt;code>on:&lt;/code> key which says the following lines will define our trigger. We then have the &lt;code>push:&lt;/code> key which says that the trigger will be an &lt;em>&lt;strong>on push&lt;/strong>&lt;/em> trigger. Finally we have the &lt;code>branches:&lt;/code> key which lists the branches we want our trigger to listen on. This can be any list of branches. For example, if we want this action to be for a pre-deploy envionment we can trigger on pushes to development branches.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#f92672">on&lt;/span>:
&lt;span style="color:#f92672">push&lt;/span>:
&lt;span style="color:#f92672">branches&lt;/span>:
- &lt;span style="color:#ae81ff">alpha&lt;/span>
- &lt;span style="color:#ae81ff">beta&lt;/span>
- &lt;span style="color:#ae81ff">staging&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="runner">Runner&lt;/h3>
&lt;p>The runner is the host OS that our workflow will be running on. Due to the fact that Github Actions use &lt;a href="https://www.docker.com/resources/what-container">docker containers&lt;/a> under the covers, we have to specify what we want that container to run.&lt;/p>
&lt;p>At the time of writing this post, there are four available runners. One for Windows, two for Ubuntu Linux, and one for macOS.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Virtual environment&lt;/th>
&lt;th>YAML workflow label&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Windows Server 2019&lt;/td>
&lt;td>&lt;code>windows-latest&lt;/code> or &lt;code>windows-2019&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Ubuntu 18.04&lt;/td>
&lt;td>&lt;code>ubuntu-latest&lt;/code> or &lt;code>ubuntu-18.04&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Ubuntu 16.04&lt;/td>
&lt;td>&lt;code>ubuntu-16.04&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>macOS Catalina 10.15&lt;/td>
&lt;td>&lt;code>macos-latest&lt;/code> or &lt;code>macos-10.15&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>In this guide, we&amp;rsquo;re going to use the &lt;code>ubuntu-16.04&lt;/code> (however the process would be the same with any of the Ubuntu runners) image as it&amp;rsquo;ll be the easiest to use for our build process.&lt;/p>
&lt;h3 id="actions">Actions&lt;/h3>
&lt;p>Actions are denoted by the &lt;code>setps:&lt;/code> key, which is followed by a list of groups of keys as illustrated in the image at the top of this page. Actions are the bulk of a github actions workflow. They describe the actions that will be executed in the workflow, from checking out the code, to running the actual build process, to deploying. We&amp;rsquo;re going to spend some time learning&lt;/p>
&lt;h4 id="checkout-action">Checkout Action&lt;/h4>
&lt;p>In a build-deploy setup, the checkout action is typically the first step that our workflow will do. The checkout action fetches the most recent version of the repo. This action is provided by github on the &amp;lsquo;actions&amp;rsquo; organization. It is important to note that there are two versions of the checkout action provided by github actions. The key difference is that v1 supports checking out submodules.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">- &lt;span style="color:#f92672">uses&lt;/span>: &lt;span style="color:#ae81ff">actions/checkout@v1&lt;/span>
&lt;span style="color:#f92672">with&lt;/span>:
&lt;span style="color:#f92672">submodules&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="third-party-actions">Third Party Actions&lt;/h4>
&lt;p>Other actions can be importated from other people&amp;rsquo;s github repositories. By using the &lt;code>uses:&lt;/code> key, you can specify a repo that will be pulled, built, and run during a workflow. These actions can take arguments by using the &lt;code>with:&lt;/code> key, which takes a list of key-value pairs similar to envionment variables. For example, deploying a built static page to github pages, we can use &lt;code>JamesIves/github-pages-deploy-action@releases/v3&lt;/code> like below:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Deploy&lt;/span>
&lt;span style="color:#f92672">uses&lt;/span>: &lt;span style="color:#ae81ff">JamesIves/github-pages-deploy-action@releases/v3&lt;/span>
&lt;span style="color:#f92672">with&lt;/span>:
&lt;span style="color:#f92672">ACCESS_TOKEN&lt;/span>: &lt;span style="color:#ae81ff">${{ secrets.ACCESS_TOKEN }}&lt;/span>
&lt;span style="color:#f92672">BRANCH&lt;/span>: &lt;span style="color:#ae81ff">gh-pages&lt;/span>
&lt;span style="color:#f92672">FOLDER&lt;/span>: &lt;span style="color:#ae81ff">dist&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>We name the custom action &amp;ldquo;Deploy&amp;rdquo; and say we will be using the &lt;code>JamesIves/github-pages-deploy-action@releases/v3&lt;/code> action. Then by passing 3 arguments of &lt;code>BRANCH&lt;/code>, &lt;code>FOLDER&lt;/code>, and &lt;code>ACCESS_TOKEN&lt;/code>, we can specify the behaviour of the action.&lt;/p>
&lt;h4 id="custom-actions-run">Custom Actions (Run)&lt;/h4>
&lt;p>You can also specify custom bash commands using the &lt;code>run:&lt;/code> key.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">- &lt;span style="color:#f92672">run&lt;/span>: &lt;span style="color:#ae81ff">npm install&lt;/span>
- &lt;span style="color:#f92672">run&lt;/span>: &lt;span style="color:#ae81ff">npm run build --if-present&lt;/span>
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>How I Automated With Ease Using Github Actions.</title><link>https://blog.brennan.sh/posts/gh-actions-automation/</link><pubDate>Thu, 13 Feb 2020 00:00:00 +0000</pubDate><guid>https://blog.brennan.sh/posts/gh-actions-automation/</guid><description>&lt;ul>
&lt;li>&lt;a href="#introduction">Introduction&lt;/a>&lt;/li>
&lt;li>&lt;a href="#building-my-workflows">Building my workflows&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#hugo">Hugo&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#trigger">Trigger&lt;/a>&lt;/li>
&lt;li>&lt;a href="#checkout-action">Checkout Action&lt;/a>&lt;/li>
&lt;li>&lt;a href="#setup-hugo-action">Setup Hugo Action&lt;/a>&lt;/li>
&lt;li>&lt;a href="#build-action">Build Action&lt;/a>&lt;/li>
&lt;li>&lt;a href="#github-pages-deploy">Github Pages Deploy&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#react-native">React Native&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#setup-action">Setup Action&lt;/a>&lt;/li>
&lt;li>&lt;a href="#build-action-1">Build Action&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#conclusion">Conclusion&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;h4 id="this-is-a-narritave-on-my-personal-use-case-if-you-want-a-guide-on-how-to-automate-click-herepostsgh-actions-automate-build-deploy----omit-in-toc---">&lt;a href="https://blog.brennan.sh/posts/gh-actions-automate-build-deploy">This is a narritave on my personal use case. If you want a guide on how to automate: click here&lt;/a> &lt;!-- raw HTML omitted -->&lt;/h4>
&lt;p>About a week ago I decided to revamp my personal site and &lt;em>FINALLY&lt;/em> get a working blog in order. Since you&amp;rsquo;re reading this the blog half obviously worked out! (Spoiler alert: so did the website half). But as someone who has always had an interest in code automation, and more recently someone who has started to expariment with it, I thought I would use this opportunity to enhance my skills in &lt;a href="https://en.wikipedia.org/wiki/Continuous_integration">continous integration&lt;/a> and &lt;a href="https://en.wikipedia.org/wiki/Continuous_delivery">continuous delivery&lt;/a>.&lt;/p>
&lt;p>&lt;img src="https://blog.brennan.sh/img/gh-action-build-deploy/ci-cd.png" alt="model of the CI/CD methodology">&lt;/p>
&lt;p>Before I thought about my build and deploy process, I had to think about the technologies I wanted to use to build the projects themselves. For the website I went with NodeJS using the React framework. I picked React due to the fact that it&amp;rsquo;s the framework i&amp;rsquo;m most comfortable with and I would be able to write it most efficiently. As for the blog, I have history using Hugo to build static sites. Hugo is a framework that is efficient at generating static html for blogs. It seemed like the best framework for the job.&lt;/p>
&lt;h2 id="building-my-workflows">Building my workflows&lt;/h2>
&lt;h3 id="hugo">Hugo&lt;/h3>
&lt;p>For my hugo workflow, I used a mix of built in and user created actions. The workflow is triggered by a code push to the master branch of the repo. I&amp;rsquo;m going to show the entire yaml file and then step through it, line-by-line.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">HUGO Build and Deploy&lt;/span>
&lt;span style="color:#f92672">on&lt;/span>:
&lt;span style="color:#f92672">push&lt;/span>:
&lt;span style="color:#f92672">branches&lt;/span>:
- &lt;span style="color:#ae81ff">master&lt;/span>
&lt;span style="color:#f92672">jobs&lt;/span>:
&lt;span style="color:#f92672">build-deploy&lt;/span>:
&lt;span style="color:#f92672">runs-on&lt;/span>: &lt;span style="color:#ae81ff">ubuntu-18.04&lt;/span>
&lt;span style="color:#f92672">steps&lt;/span>:
- &lt;span style="color:#f92672">uses&lt;/span>: &lt;span style="color:#ae81ff">actions/checkout@v1&lt;/span>
&lt;span style="color:#f92672">with&lt;/span>:
&lt;span style="color:#f92672">submodules&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Setup Hugo&lt;/span>
&lt;span style="color:#f92672">uses&lt;/span>: &lt;span style="color:#ae81ff">peaceiris/actions-hugo@v2&lt;/span>
&lt;span style="color:#f92672">with&lt;/span>:
&lt;span style="color:#f92672">hugo-version&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;0.62.2&amp;#39;&lt;/span>
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Build&lt;/span>
&lt;span style="color:#f92672">run&lt;/span>: &lt;span style="color:#ae81ff">hugo --minify&lt;/span>
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Deploy&lt;/span>
&lt;span style="color:#f92672">uses&lt;/span>: &lt;span style="color:#ae81ff">JamesIves/github-pages-deploy-action@releases/v3&lt;/span>
&lt;span style="color:#f92672">with&lt;/span>:
&lt;span style="color:#f92672">ACCESS_TOKEN&lt;/span>: &lt;span style="color:#ae81ff">${{ secrets.ACTIONS_DEPLOY_KEY }}&lt;/span>
&lt;span style="color:#f92672">BRANCH&lt;/span>: &lt;span style="color:#ae81ff">gh-pages&lt;/span>
&lt;span style="color:#f92672">FOLDER&lt;/span>: &lt;span style="color:#ae81ff">public&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Walking through this, section by section we can see the breakdown of the workflow logic.&lt;/p>
&lt;h4 id="trigger">Trigger&lt;/h4>
&lt;p>It all starts with a very simple trigger that builds on a push to the master. Since this project isn&amp;rsquo;t fast moving, I can have the building of the static files driven by the event of a push. However if I were to be pushing raidly to this repo, I might decide to schedule a nightly build instead.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#f92672">on&lt;/span>:
&lt;span style="color:#f92672">push&lt;/span>:
&lt;span style="color:#f92672">branches&lt;/span>:
- &lt;span style="color:#ae81ff">master&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Im going to skip the runner because there isn&amp;rsquo;t much to say about selecting ubuntu as the base image that I used.&lt;/p>
&lt;h4 id="checkout-action">Checkout Action&lt;/h4>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">- &lt;span style="color:#f92672">uses&lt;/span>: &lt;span style="color:#ae81ff">actions/checkout@v1&lt;/span>
&lt;span style="color:#f92672">with&lt;/span>:
&lt;span style="color:#f92672">submodules&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Her we have my first action, the checkout action. If you&amp;rsquo;re familiar with github actions it should be simple enough to identify what this does. Essentially, this action pulls the most recent code base on the master branch and places it in our workflow&amp;rsquo;s container.&lt;/p>
&lt;p>Something of note here, I have to use the checkout V1 module becasue the V2 module does not yet support submodules, which is required by this project because my theme is a &lt;a href="https://github.com/BrennanMcDonald/hugo-theme-noteworthy">seperate git repo&lt;/a> and i&amp;rsquo;ve included it as a submodule in the themes folder.&lt;/p>
&lt;h4 id="setup-hugo-action">Setup Hugo Action&lt;/h4>
&lt;p>The next action is a great action from &lt;a href="https://github.com/peaceiris">peaceiris&lt;/a>, which interstingly enough is written in &lt;a href="https://www.typescriptlang.org/">TypeScript&lt;/a>, that simply pulls the latest hugo version and installs it on the workflow&amp;rsquo;s runner image.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Setup Hugo&lt;/span>
&lt;span style="color:#f92672">uses&lt;/span>: &lt;span style="color:#ae81ff">peaceiris/actions-hugo@v2&lt;/span>
&lt;span style="color:#f92672">with&lt;/span>:
&lt;span style="color:#f92672">hugo-version&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;0.62.2&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="build-action">Build Action&lt;/h4>
&lt;p>Thanks to the simplicity of hugo&amp;rsquo;s build system, an image isn&amp;rsquo;t necessary for this step, all we need to do is run the &lt;code>hugo&lt;/code> command in our working directory and we have liftoff.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Build&lt;/span>
&lt;span style="color:#f92672">run&lt;/span>: &lt;span style="color:#ae81ff">hugo --minify&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="github-pages-deploy">Github Pages Deploy&lt;/h4>
&lt;p>Finally, once we&amp;rsquo;ve build hugo, we&amp;rsquo;ll need to deploy. In this case im deploying to github pages because im fairly fond of it and use it for a few other projects already (may as well put all the eggs in one basket eh?). This action is a little more technical so i&amp;rsquo;ll take a walk through what is going on under the covers.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Deploy&lt;/span>
&lt;span style="color:#f92672">uses&lt;/span>: &lt;span style="color:#ae81ff">JamesIves/github-pages-deploy-action@releases/v3&lt;/span>
&lt;span style="color:#f92672">with&lt;/span>:
&lt;span style="color:#f92672">ACCESS_TOKEN&lt;/span>: &lt;span style="color:#ae81ff">${{ secrets.ACTIONS_DEPLOY_KEY }}&lt;/span>
&lt;span style="color:#f92672">BRANCH&lt;/span>: &lt;span style="color:#ae81ff">gh-pages&lt;/span>
&lt;span style="color:#f92672">FOLDER&lt;/span>: &lt;span style="color:#ae81ff">public&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Here we&amp;rsquo;re pulling &lt;a href="https://github.com/JamesIves/">JamesIves&amp;rsquo;s&lt;/a> well used &lt;em>&lt;strong>github-pages-deploy-action&lt;/strong>&lt;/em> action. We also have our first use of a &lt;a href="https://help.github.com/en/actions/configuring-and-managing-workflows/creating-and-storing-encrypted-secrets">secret&lt;/a> in this workflow. In this case, that secret is my github personal access token which is used for copying my build artifacts (the html files) to the gh-pages branch and setting up the Github Pages settings.&lt;/p>
&lt;p>The core of this action is the &lt;code>git&lt;/code> cli which is orchestrated wiht a couple TypeScript files. The two other arguments in this action are fairly straightforward, &lt;code>BRANCH:&lt;/code> is the selected branch we are going to be pushing our build code to, and &lt;code>FOLDER:&lt;/code> is the folder whos content will be pushed to the specified branch.&lt;/p>
&lt;h3 id="react-native">React Native&lt;/h3>
&lt;p>This set of actions is similar to the previous example with two main differences, the setup and build actions.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Node.js CI&lt;/span>
&lt;span style="color:#f92672">on&lt;/span>: [&lt;span style="color:#ae81ff">push]&lt;/span>
&lt;span style="color:#f92672">jobs&lt;/span>:
&lt;span style="color:#f92672">build&lt;/span>:
&lt;span style="color:#f92672">runs-on&lt;/span>: &lt;span style="color:#ae81ff">ubuntu-latest&lt;/span>
&lt;span style="color:#f92672">steps&lt;/span>:
- &lt;span style="color:#f92672">uses&lt;/span>: &lt;span style="color:#ae81ff">actions/checkout@v2&lt;/span>
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Build&lt;/span>
&lt;span style="color:#f92672">uses&lt;/span>: &lt;span style="color:#ae81ff">actions/setup-node@v1&lt;/span>
&lt;span style="color:#f92672">with&lt;/span>:
&lt;span style="color:#f92672">node-version&lt;/span>: &lt;span style="color:#ae81ff">10.&lt;/span>&lt;span style="color:#ae81ff">x&lt;/span>
- &lt;span style="color:#f92672">run&lt;/span>: &lt;span style="color:#ae81ff">npm install&lt;/span>
- &lt;span style="color:#f92672">run&lt;/span>: &lt;span style="color:#ae81ff">npm run build --if-present&lt;/span>
&lt;span style="color:#f92672">env&lt;/span>:
&lt;span style="color:#f92672">CI&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Deploy&lt;/span>
&lt;span style="color:#f92672">uses&lt;/span>: &lt;span style="color:#ae81ff">JamesIves/github-pages-deploy-action@releases/v3&lt;/span>
&lt;span style="color:#f92672">with&lt;/span>:
&lt;span style="color:#f92672">ACCESS_TOKEN&lt;/span>: &lt;span style="color:#ae81ff">${{ secrets.ACCESS_TOKEN }}&lt;/span>
&lt;span style="color:#f92672">BRANCH&lt;/span>: &lt;span style="color:#ae81ff">gh-pages&lt;/span>
&lt;span style="color:#f92672">FOLDER&lt;/span>: &lt;span style="color:#ae81ff">dist&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="setup-action">Setup Action&lt;/h4>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#f92672">uses&lt;/span>: &lt;span style="color:#ae81ff">actions/setup-node@v1&lt;/span>
&lt;span style="color:#f92672">with&lt;/span>:
&lt;span style="color:#f92672">node-version&lt;/span>: &lt;span style="color:#ae81ff">10.&lt;/span>&lt;span style="color:#ae81ff">x&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The action we use for the NodeJS setup is provided by github under the &lt;a href="https://github.com/actions/">actions org&lt;/a>. This action uses a &lt;a href="https://github.com/actions/setup-node/blob/master/src/installer.ts">TypeScript installer&lt;/a> to set up NodeJS on the runner.&lt;/p>
&lt;h4 id="build-action-1">Build Action&lt;/h4>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">- &lt;span style="color:#f92672">run&lt;/span>: &lt;span style="color:#ae81ff">npm install&lt;/span>
- &lt;span style="color:#f92672">run&lt;/span>: &lt;span style="color:#ae81ff">npm run build --if-present&lt;/span>
&lt;span style="color:#f92672">env&lt;/span>:
&lt;span style="color:#f92672">CI&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>These two &lt;code>run:&lt;/code> lines execute two lines of &lt;code>npm cli&lt;/code> code. To NodeJS developers these should be self-explanitory, but for real developers: The first line installs all dependancies required for the build process, and the second one builds the code that is present in the working directory.&lt;/p>
&lt;h2 id="conclusion">Conclusion&lt;/h2>
&lt;p>I hope this has shed some light on how EASY automation with Github Actions is. I now have two files that I can drop into any React or HUGO project that will work. If you have any questions you think I can answer, feel free to reach out to me using the links to the left.&lt;/p></description></item><item><title>My Facination with Micro-Infrastructure and Mini-Cities</title><link>https://blog.brennan.sh/posts/micro-infrastructure/</link><pubDate>Tue, 11 Feb 2020 00:00:00 +0000</pubDate><guid>https://blog.brennan.sh/posts/micro-infrastructure/</guid><description>&lt;ul>
&lt;li>&lt;a href="#micro-infrastructure">Micro-Infrastructure&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#compact-living-spaces">Compact living spaces&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#mini-cities">Mini-Cities&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#kowloon-walled-city">Kowloon Walled City&lt;/a>&lt;/li>
&lt;li>&lt;a href="#univeristy-campuses">Univeristy Campuses&lt;/a>&lt;/li>
&lt;li>&lt;a href="#indoor-emulated-cities">Indoor emulated cities&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#wrapping-it-up">Wrapping it up&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>Often I find it hard to describe some of my weirder fascinations and hobbies. For examplem I find &lt;a href="https://en.wikipedia.org/wiki/Survey_marker">geodetic markers&lt;/a>, strange geographical artifacts, and the math that links them fascinating. Luckily for me, geodesy and geography have titles and are fairly easy to describe. When I get giddy over the &lt;a href="https://ridgelineimages.com/maps/geodetic-datum-origin-japan/">geodetic datum origin of Japan&lt;/a>, it&amp;rsquo;s fairly easy to find more about it because there are keywords I can use to get hits on Google. However, not all of the things that excite me like geodesy are easy to describe.&lt;/p>
&lt;h2 id="micro-infrastructure">Micro-Infrastructure&lt;/h2>
&lt;p>&lt;img src="https://blog.brennan.sh/img/micro-infrastructure/image1.png" alt="Example of a micro-infrastructure setting">&lt;/p>
&lt;p>This brings me to what I like to refer to as &amp;ldquo;Micro-Infrastructure&amp;rdquo;. I define Micro-Infrastructure (which I will henceforth refer to as M.I.) as any set of systems that looks to maximize the functionality or utility of a space, in particular a relatively small space to that of its surroundings. What I mean by this is an area of buildings (commercial and residential), infrastructure, and routing between these services. In the first image, along the left is a series of shops and residences, all of which are interconnected via paths on both sides and elongated halls down the middle. The scale of the surrounding buildings is hard to view in the picture I took so let me show you a zoomed-out view.&lt;/p>
&lt;p>&lt;img src="https://blog.brennan.sh/img/micro-infrastructure/image2.png" alt="Overview of Shibuya">&lt;/p>
&lt;p>The set of buildings in my first image exists a meer 2 blocks from the &lt;a href="https://en.wikipedia.org/wiki/Shibuya_Station">second busiest train station in the world&lt;/a> and minutes from the world-famous &lt;a href="https://en.wikipedia.org/wiki/Shibuya_Crossing">Shibuya Crossing&lt;/a>. Having such a (relatively) self-sustaining ecosystem in the middle of a busy downtown core is the center of my fascination.&lt;/p>
&lt;p>While theoretically M.I. shouldn&amp;rsquo;t be specific to a region, I seem to find it&amp;rsquo;s most prevalent in eastern countries such as Japan, Singapore, India, and Taiwan. My best guess as to the cause of this is zoning laws. All of these countries either have unique zoning laws when it comes to mixed residential and commercial or have zoning laws that are weakly enforced. This being said, while I tend to be most fascinated with the eastern examples of M.I., there are a few edge cases that I want to touch upon that are fairly western that hit the same notes as the ones previously mentioned.&lt;/p>
&lt;h3 id="compact-living-spaces">Compact living spaces&lt;/h3>
&lt;p>&lt;img src="https://i.pinimg.com/originals/e1/8d/8c/e18d8c2b8a5f6e41b82345ade0d95b8b.jpg" alt="Tiny Homes">
The recent surge of tiny homes that manage to fit living, working, and eating quarters in a small space that is often sub-500sqft fascinates me in the same way that M.I. does. By doing the same thing that I define as M.I. on an individual scale, the innovations and efficiency of packing that much functionality into a small space is a fascinating case of optimization.&lt;/p>
&lt;h2 id="mini-cities">Mini-Cities&lt;/h2>
&lt;p>The concept and terminology of Mini-cities is not a new one, although the use of the term varies depending on who you ask. However, I do want to set the record straight. When I refer to a Mini-city, I do not mean a full-sized city that has been scaled down to an unusable size. I am more-so referring to a fully functioning city, complete with the means to self-sustain, that exists on a scale that is relatively smaller to a normal city or that exists within a full-sized city. Let me throw some examples your way.&lt;/p>
&lt;h3 id="kowloon-walled-city">Kowloon Walled City&lt;/h3>
&lt;p>&lt;img src="https://blog.brennan.sh/img/micro-infrastructure/image3.jpg" alt="Kowloon Walled City">&lt;/p>
&lt;p>If you&amp;rsquo;re not familiar with the Kowloon Walled City, I would recommend reading up more about it after this as I will not be doing the scale of this project any justice. The Kowloon Walled City was a former Chinese military fort in Hong Kong following the Japanese occupation of Hong Kong. After the Japanese surrender in 1945, the fort became a location of refuge for citizens fleeing the Chinese Civil War. At its peak, the Kowloon Walled City had an estimated 33k people, a function municipal government, restaurants, clinics. Some units within the Kowloon Walled City even had electricity and plumbing, although this was significantly rarer.&lt;/p>
&lt;h3 id="univeristy-campuses">Univeristy Campuses&lt;/h3>
&lt;p>&lt;img src="https://blog.brennan.sh/img/micro-infrastructure/image4.jpg" alt="UBC">&lt;/p>
&lt;p>Another example of what I would consider a mini-city is a typical university campus. For example, the University of British Columbia in Canada is a great example of a fully-sustainable city, technically within a city. However, one special thing about UBC is the campus is separated from the rest of the city by a large wooded area and actually requires a small drive (or longer bus/walk) to get to.&lt;/p>
&lt;p>&lt;img src="https://blog.brennan.sh/img/micro-infrastructure/image5.png" alt="UBC Map">&lt;/p>
&lt;p>While this example isn&amp;rsquo;t entirely true, in most University Campuses in the western world, campus infrastructure can range from a clinic to a full hospital, with most even having their own method power generation. Residences provide places for students to live, there are restaurants so students can eat, and often students can find work on campus. Aside from import and exports these campuses can be fully sustainable on their own.&lt;/p>
&lt;h3 id="indoor-emulated-cities">Indoor emulated cities&lt;/h3>
&lt;p>Finally, an edge case I want to hit briefly is what I call &amp;ldquo;Emulated Cities&amp;rdquo;. I won&amp;rsquo;t describe these too much because they don&amp;rsquo;t fit the definition as they&amp;rsquo;re usually not functional, but ill provide a few small images to show my point.&lt;/p>
&lt;p>&lt;img src="https://blog.brennan.sh/img/micro-infrastructure/image6.png" alt="&amp;ldquo;emulated cities&amp;rdquo;">&lt;/p>
&lt;p>These are facilities that are modeled to look like cities however they tend to serve a secondary purpose, such as a retirement home, mall, or play-place for children.&lt;/p>
&lt;h2 id="wrapping-it-up">Wrapping it up&lt;/h2>
&lt;p>I hope I have done a moderate job of defining the two terms, Micro-Infrastructure and Mini-Cities, and I hope I have done a good job at convincing you why they fascinate me. In all honesty, this was just a long rant on something I didn&amp;rsquo;t know how to explain formally. I hope I did a decent job of formalizing it to you and I hope this helps others put their fascinations into words. Not all hobbies are easy to explain and it&amp;rsquo;s nice to be able to get it all out and explain the niche, absurd things that fascinate me. Thanks for listening.&lt;/p></description></item></channel></rss>